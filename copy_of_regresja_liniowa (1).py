# -*- coding: utf-8 -*-
"""Copy of regresja liniowa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y22Xa8zZ9Ypplqs039cYUuEEkEkQoxLN

import danych
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

url = 'https://docs.google.com/spreadsheets/d/1Vy2DuNiBlHxi4azUcaef8JL1ayMfieJWTn8ECG9KPyo/export?format=csv'
df = pd.read_csv(url)

"""dumpy numbers - zamiana danych jakościowych na ilościowe



"""

#patrzę jakie typy danych
df.info()
df.isnull().sum() # czy null

#zmiana na typy ilościowe
df['sex'] = df['sex'].astype('category')
df['smoker'] = df['smoker'].astype('category')
df['region'] = df['region'].astype('category')

df_sex = pd.DataFrame({'sex_Codes': df['sex'].cat.codes})
df_smoker = pd.DataFrame({'smoker_Codes': df['smoker'].cat.codes})
df_region = pd.DataFrame({'region_Codes': df['region'].cat.codes})

#pozostałe ramki
df_age = df['age']
df_bmi = df['bmi']
df_children = df['children']

#normalizacja danych
df_age = (df_age - df_age.min()) / (df_age.max() - df_age.min())
df_bmi = (df_bmi - df_bmi.min()) / (df_bmi.max() - df_bmi.min())
df_children = (df_children - df_children.min()) / (df_children.max() - df_children.min())
#df_charges_sampling = df_charges[0]

"""model 1 - wysokość opłat na ubezpieczenie, a płeć + fakt palenia"""

X = pd.concat([df_sex, df_smoker], axis=1)
y = df['charges']

#zbiór treningowy i testowy (80% treningowy, 20% testowy)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#trening modelu
model = LinearRegression()
model.fit(X_train, y_train)

#przewidywanie na zbiorze testowym
y_pred = model.predict(X_test)

#ocena modelu
print('coefficients: ', model.coef_)
print('intercept: ', model.intercept_)

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f'Root Mean Squared Error (RMSE): {rmse:.2f}')
print(f'Coefficient of determination (R^2): {r2:.2f}')

"""# Model 2: df_sex + df_smoker + df_age"""

X = pd.concat([df_sex, df_smoker, df['age']], axis=1)
y = df['charges']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model2 = LinearRegression()
model2.fit(X_train, y_train)

y_pred2 = model2.predict(X_test)

rmse2 = np.sqrt(mean_squared_error(y_test, y_pred2))
r2_2 = r2_score(y_test, y_pred2)

print('coefficients: ', model2.coef_)
print('intercept: ', model2.intercept_)
print('Model 2 - RMSE:', rmse2)
print('Model 2 - R²:', r2_2)

"""# Model 3: df_sex + df_smoker + df_age + df_bmi"""

# Model 3: df_sex + df_smoker + df_age + df_bmi
X = pd.concat([df_sex, df_smoker, df['age'], df['bmi']], axis=1)
y = df['charges']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model3 = LinearRegression()
model3.fit(X_train, y_train)

y_pred3 = model3.predict(X_test)

rmse3 = np.sqrt(mean_squared_error(y_test, y_pred3))
r2_3 = r2_score(y_test, y_pred3)

#ocena modelu
print('coefficients: ', model3.coef_)
print('intercept: ', model3.intercept_)
print('Model 3 - RMSE:', rmse3)
print('Model 3 - R²:', r2_3)

# Model 4: Wszystkie cechy dostępne w df
df_final = pd.concat([df_sex, df_smoker, df_region, df_age, df_bmi, df_children], axis=1)
X = df_final

y = df['charges']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model4 = LinearRegression()
model4.fit(X_train, y_train)

y_pred4 = model4.predict(X_test)

rmse4 = np.sqrt(mean_squared_error(y_test, y_pred4))
r2_4 = r2_score(y_test, y_pred4)

#ocena modelu
print('coefficients: ', model4.coef_)
print('intercept: ', model4.intercept_)
print('Model 4 - RMSE:', rmse4)
print('Model 4 - R²:', r2_4)

#analiza RMSE
df_charges = df['charges'].mean()
df_charges